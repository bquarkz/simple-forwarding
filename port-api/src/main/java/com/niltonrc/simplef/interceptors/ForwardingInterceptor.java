package com.niltonrc.simplef.interceptors;

import com.niltonrc.simplef.contracts.IEntryService;
import com.niltonrc.simplef.messages.SwapRequest;
import com.niltonrc.simplef.messages.SwapResponse;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ForwardingInterceptor extends HandlerInterceptorAdapter
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private final IEntryService entryService;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public ForwardingInterceptor( IEntryService entryService )
    {
        this.entryService = entryService;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public boolean preHandle(
            HttpServletRequest httpRequest,
            HttpServletResponse httpResponse,
            Object handler ) throws Exception
    {
        final String uri = httpRequest.getRequestURI();
        if( uri.startsWith( "/api" ) )
        {
            return true;
        }
        else
        {
            final int index = uri.indexOf( "/", 1 );
            final String code = uri.substring( 1, index == -1 ? uri.length() : index );
            final String rawPath = uri.substring( 1 + code.length() );
            final String path = rawPath.equalsIgnoreCase( "/" ) || rawPath.isEmpty() ? "" : rawPath.substring( 1 );

            final SwapResponse response = entryService.swap( new SwapRequest( code, path ) );
            if( response.isOk() )
            {
                final String forwarding = response.getForwarding();
                if( rawPath.isEmpty() )
                {
                    httpResponse.sendRedirect( forwarding );
                }
                else
                {
                    httpResponse.sendRedirect( forwarding.endsWith( "/" )
                            ? forwarding + rawPath.substring( 1 )
                            : forwarding + rawPath );
                }
            }
            else
            {
                httpResponse.setStatus( 404 );
            }

            return false;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

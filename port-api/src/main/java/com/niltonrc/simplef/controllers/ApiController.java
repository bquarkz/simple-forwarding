package com.niltonrc.simplef.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.niltonrc.simplef.contracts.IEntryService;
import com.niltonrc.simplef.messages.CreateForwardingRequest;
import com.niltonrc.simplef.messages.CreateForwardingResponse;
import com.niltonrc.simplef.messages.StatisticsRequest;
import com.niltonrc.simplef.messages.StatisticsResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping( "/api" )
public class ApiController
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private final IEntryService entryService;
    private final ObjectMapper mapper;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Autowired
    protected ApiController( IEntryService entryService )
    {
        this.entryService = entryService;
        this.mapper = new ObjectMapper();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @RequestMapping(
            value = "/create",
            method = { RequestMethod.POST },
            consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE )
    public String create( @RequestBody String address ) throws JsonProcessingException
    {
        final CreateForwardingResponse response = entryService.createForwarding( new CreateForwardingRequest( address ) );
        return mapper.writeValueAsString( response.getForwardingBundles() );
    }

    @RequestMapping(
            value = "/statistics",
            method = { RequestMethod.GET },
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE )
    public String statistics( @RequestParam( value = "code" ) List< String > codes ) throws JsonProcessingException
    {
        final StatisticsResponse response = entryService.getStatistics( new StatisticsRequest( codes ) );
        return mapper.writeValueAsString( response.getStatistics() );
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
